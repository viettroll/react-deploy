{"version":3,"sources":["images/08.jpg","images/09.jpg","components/modal-image/modal-image.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ModalImage","props","_this","Object","classCallCheck","this","ratioWHArray","possibleConstructorReturn","getPrototypeOf","call","ratio","split","ratioWH","updateDimensions","bind","assertThisInitialized","showModal","hideModal","modalElm","style","display","imageElm","height","concat","offsetWidth","rootElm","ReactDOM","findDOMNode","querySelector","window","addEventListener","removeEventListener","react_default","a","createElement","className","src","alt","onClick","React","Component","App","modal_image_ModalImage","img8","img9","href","Boolean","location","hostname","match","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,6PCInBC,qBACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GAQjB,IAAMM,GAPNJ,EAAAC,OAAAI,EAAA,EAAAJ,CAAAE,KAAAF,OAAAK,EAAA,EAAAL,CAAAH,GAAAS,KAAAJ,KAAMJ,KAOoBA,MAAMS,MAAMC,MAAM,KAR3B,OASjBT,EAAKU,QAAUN,EAAa,GAAKA,EAAa,GAE9CJ,EAAKW,iBAAmBX,EAAKW,iBAAiBC,KAAtBX,OAAAY,EAAA,EAAAZ,CAAAD,IACxBA,EAAKc,UAAYd,EAAKc,UAAUF,KAAfX,OAAAY,EAAA,EAAAZ,CAAAD,IACjBA,EAAKe,UAAYf,EAAKe,UAAUH,KAAfX,OAAAY,EAAA,EAAAZ,CAAAD,IAbAA,2EAuBjBG,KAAKa,SAASC,MAAMC,QAAU,8CAU9Bf,KAAKa,SAASC,MAAMC,QAAU,kDAW9Bf,KAAKgB,SAASF,MAAMG,OAApB,GAAAC,OAAgClB,KAAKgB,SAASG,YAAcnB,KAAKO,QAAjE,kDAkBAP,KAAKoB,QAAUC,IAASC,YAAYtB,MACpCA,KAAKgB,SAAWhB,KAAKoB,QAAQG,cAAc,UAC3CvB,KAAKa,SAAWb,KAAKoB,QAAQG,cAAc,UAE3CvB,KAAKQ,mBACLgB,OAAOC,iBAAiB,SAAUzB,KAAKQ,iEAQvCgB,OAAOE,oBAAoB,SAAU1B,KAAKQ,mDAI1C,OACEmB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,QACVC,IAAK/B,KAAKJ,MAAMmC,IAChBC,IAAKhC,KAAKJ,MAAMoC,IAChBC,QAASjC,KAAKW,YAGhBgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAQG,QAASjC,KAAKY,WAAtC,QACAe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBC,IAAK/B,KAAKJ,MAAMmC,IAAKC,IAAKhC,KAAKJ,MAAMoC,IAAM,WAC1EL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAW9B,KAAKJ,MAAMoC,cA5FPE,IAAMC,6CCGzBC,mLAEjB,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,qDAEAF,EAAAC,EAAAC,cAAA,OACEf,MAAO,CACLC,QAAO,SAGTY,EAAAC,EAAAC,cAACQ,EAAD,CACEN,IAAKO,IACLN,IAAG,iCACH3B,MAAK,QAEPsB,EAAAC,EAAAC,cAACQ,EAAD,CACEN,IAAKQ,IACLP,IAAG,sCACH3B,MAAK,SAITsB,EAAAC,EAAAC,cAAA,sBACUF,EAAAC,EAAAC,cAAA,KAAGW,KAAK,iCAAR,YADV,iBAEcb,EAAAC,EAAAC,cAAA,KAAGW,KAAK,mCAAR,0BAFd,aAxByBN,IAAMC,WCKnBM,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNvB,IAASwB,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e4534a81.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/08.075ab7df.jpg\";","module.exports = __webpack_public_path__ + \"static/media/09.6089d193.jpg\";","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './modal-image.css';\r\n\r\nexport default class ModalImage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    /*\r\n    * Khi sử dụng, mình sẽ truyền thuộc tính ratio, giả sử là \"3:2\"\r\n    * Như vậy, tỉ lệ width/height là this.ratioWH = 3 / 2\r\n    * Mình sẽ điều chỉnh các ảnh sao cho về cùng 1 kích thước. \r\n    */\r\n    const ratioWHArray = this.props.ratio.split(\":\");\r\n    this.ratioWH = ratioWHArray[0] / ratioWHArray[1];\r\n\r\n    this.updateDimensions = this.updateDimensions.bind(this);\r\n    this.showModal = this.showModal.bind(this);\r\n    this.hideModal = this.hideModal.bind(this);\r\n  }\r\n\r\n  /** \r\n   * Hiển thị Modal Image bằng cách set giá trị \r\n   * cho thuộc tính display của style, \r\n   * của phần tử đóng vai trò là Modal Image là \"initial\",\r\n   * để hiển thị nó\r\n  */\r\n  showModal() {\r\n    this.modalElm.style.display = \"initial\";\r\n  }\r\n\r\n  /** \r\n   * Ẩn ảnh Modal Image bằng cách set giá trị\r\n   * cho thuộc tính display của style,\r\n   * của phần tử đóng vai trò là Modal Image là \"none\",\r\n   * để ẩn nó đi\r\n  */\r\n  hideModal() {\r\n    this.modalElm.style.display = \"none\";\r\n  }\r\n\r\n  /*\r\n  * Cập nhật chiều cao cho mỗi ảnh khi thay đổi kích thước màn hình\r\n  * Trong phần CSS, mình để mỗi ảnh có width = 100%,\r\n  * Nên dù kéo to hay thu nhỏ thì width vẫn bằng 100% kích thước parent.\r\n  * Nhưng chiều cao là giá trị tuyệt đối nên phải tính lại, \r\n  * dựa vào width và tỉ lệ this.ratioWH = width / height\r\n  */\r\n  updateDimensions() {\r\n    this.imageElm.style.height = `${this.imageElm.offsetWidth / this.ratioWH}px`;\r\n  }\r\n\r\n  /** \r\n   * Hàm này được gọi khi Modal Image đã render lên HTML.\r\n   * Trong này mình sẽ lưu lại DOM node ứng với các phần tử \r\n   *   + this.rootElm -> toàn bộ component\r\n   *   + this.imageElm -> phiên bản ảnh nhỏ, hiển thị lúc đầu\r\n   *   + this.modalElm -> phiên bản ảnh lớn, modal image\r\n   * \r\n   * Tiếp theo, gọi hàm this.updateDimensions() để cập nhật chiều cao\r\n   * cho ảnh nhỏ ban đầu.\r\n   * \r\n   * Và cuối cùng là đăng ký sự kiên resize màn hình, với hàm xử lý \r\n   * là updateDimensions(). Tức là mỗi khi thay đổi kích thước màn hình\r\n   * thì sẽ tính lại chiều cao ảnh - đảm bảo tính responsive.\r\n  */\r\n  componentDidMount() {\r\n    this.rootElm = ReactDOM.findDOMNode(this);\r\n    this.imageElm = this.rootElm.querySelector(\".image\");\r\n    this.modalElm = this.rootElm.querySelector(\".modal\");\r\n\r\n    this.updateDimensions();\r\n    window.addEventListener(\"resize\", this.updateDimensions);\r\n  }\r\n\r\n  /** \r\n   * Hàm này được gọi khi Component bị xóa khỏi HTML.\r\n   * Lúc này mình phải hủy bỏ sự kiện đã đăng ký lúc trước.\r\n  */\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.updateDimensions);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"lp-modal-image\">\r\n        <img \r\n          className=\"image\" \r\n          src={this.props.src} \r\n          alt={this.props.alt} \r\n          onClick={this.showModal}\r\n        />\r\n        \r\n        <div className=\"modal\">\r\n          <span className=\"close\" onClick={this.hideModal}>×</span>\r\n          <img className=\"modal-content\" src={this.props.src} alt={this.props.alt + \" modal\"} />\r\n          <div className=\"caption\">{this.props.alt}</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\nimport './App.css';\n\nimport ModalImage from './components/modal-image/modal-image';\nimport img8 from './images/08.jpg';\nimport img9 from './images/09.jpg';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h2>Image Modal</h2>\n        <p>Click the image below to show the modal.</p>\n\n        <div \n          style={{\n            display: `flex`\n          }}\n        >\n          <ModalImage\n            src={img8}\n            alt={`This is one of beautiful girls`}\n            ratio={`3:2`}\n          />\n          <ModalImage\n            src={img9}\n            alt={`This is also one of beautiful girls`}\n            ratio={`3:2`}\n          />\n        </div>\n\n        <div>\n          Made by <a href=\"https://about.phamvanlam.com/\">Lam Pham</a>.\n          Visit me at <a href=\"https://completejavascript.com/\">completejavascript.com</a>.\n        </div>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}